
@online{ArchivoKubernetesLogo,
  title = {Archivo:Kubernetes logo.svg - Wikipedia, la enciclopedia libre},
  shorttitle = {Archivo},
  url = {https://commons.wikimedia.org/wiki/File:Kubernetes_logo.svg},
  urldate = {2021-06-13},
  file = {/home/javinator9889/Zotero/storage/VZZ4ACEI/ArchivoKubernetes_logo.html},
  langid = {spanish}
}

@online{BestPracticesWriting2021,
  title = {Best Practices for Writing {{Dockerfiles}}},
  date = {2021-06-09T15:07:30+00:00},
  url = {https://docs.docker.com/develop/develop-images/dockerfile_best-practices/},
  urldate = {2021-06-10},
  abstract = {Hints, tips and guidelines for writing clean, reliable Dockerfiles},
  file = {/home/javinator9889/Zotero/storage/ATFP85G4/dockerfile_best-practices.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{blogEvolvingContainerSecurity2021,
  title = {Evolving {{Container Security With Linux User Namespaces}}},
  author = {Blog, Netflix Technology},
  date = {2021-01-07T17:07:44},
  url = {https://netflixtechblog.com/evolving-container-security-with-linux-user-namespaces-afbe3308c082},
  urldate = {2021-06-14},
  abstract = {By Fabio Kung, Sargun Dhillon, Andrew Spyker, Kyle, Rob Gulewich, Nabil Schear, Andrew Leung, Daniel Muino, and Manas Alekar},
  file = {/home/javinator9889/Zotero/storage/CWLW7NS8/evolving-container-security-with-linux-user-namespaces-afbe3308c082.html},
  langid = {english},
  organization = {{Medium}}
}

@online{CapabilitiesLinuxManual,
  title = {Capabilities(7) - {{Linux}} Manual Page},
  url = {https://man7.org/linux/man-pages/man7/capabilities.7.html},
  urldate = {2021-06-14},
  file = {/home/javinator9889/Zotero/storage/LC795QVN/capabilities.7.html}
}

@inreference{Cgroups2021,
  title = {Cgroups},
  booktitle = {Wikipedia},
  date = {2021-06-10T14:47:00Z},
  url = {https://en.wikipedia.org/w/index.php?title=Cgroups&oldid=1027879091},
  urldate = {2021-06-13},
  abstract = {cgroups (abbreviated from control groups) is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes. Engineers at Google (primarily Paul Menage and Rohit Seth) started the work on this feature in 2006 under the name "process containers". In late 2007, the nomenclature changed to "control groups" to avoid confusion caused by multiple meanings of the term "container" in the Linux kernel context, and the control groups functionality was merged into the Linux kernel mainline in kernel version 2.6.24, which was released in January 2008. Since then, developers have added many new features and controllers, such as support for kernfs in 2014, firewalling, and unified hierarchy. cgroup v2 was merged in Linux kernel 4.5 with significant changes to the interface and internal functionality.},
  annotation = {Page Version ID: 1027879091},
  file = {/home/javinator9889/Zotero/storage/76ACRRE5/index.html},
  langid = {english}
}

@online{ComoInstalarWordPress,
  title = {Cómo Instalar {{WordPress}} Con {{Docker Compose}}},
  url = {https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose-es},
  urldate = {2021-06-12},
  abstract = {WordPress es un sistema de administración de contenido (CMS) gratuito y de código abierto que se desarrolla sobre una base de datos de…},
  file = {/home/javinator9889/Zotero/storage/8BP2Z2QB/how-to-install-wordpress-with-docker-compose-es.html},
  langid = {english},
  organization = {{DigitalOcean}}
}

@online{ContainerAdoptionStatistics,
  title = {Container {{Adoption Statistics}}: {{The Future}} of the {{Container Market}}},
  shorttitle = {Container {{Adoption Statistics}}},
  url = {https://www.capitalone.com/tech/cloud/container-adoption-statistics/},
  urldate = {2021-06-04},
  abstract = {Learn about 2020 container adoption statistics and trends from 263 tech leaders in a report conducted by Forrester Consulting on behalf of Capital One.},
  file = {/home/javinator9889/Zotero/storage/AUDM5C7M/container-adoption-statistics.html},
  langid = {english},
  organization = {{Capital One}}
}

@online{ContainerAdoptionTrends,
  title = {6 {{Container Adoption Trends}} of 2020},
  url = {https://www.stackrox.com/post/2020/03/6-container-adoption-trends-of-2020/},
  urldate = {2021-06-04},
  abstract = {Here are today’s top 6 container adoption trends that we uncovered in our latest State of Container and Kubernetes Security survey report.},
  file = {/home/javinator9889/Zotero/storage/VAAFEL7I/6-container-adoption-trends-of-2020.html},
  langid = {english},
  organization = {{StackRox: Kubernetes and container security solution}}
}

@online{Containerd,
  title = {Containerd},
  url = {https://containerd.io/},
  urldate = {2021-06-03},
  abstract = {An industry-standard container runtime with an emphasis on simplicity, robustness, and portability},
  file = {/home/javinator9889/Zotero/storage/FMKHSCZ9/containerd.io.html},
  langid = {american}
}

@online{ContainerOrchestration,
  title = {Container {{Orchestration}}},
  url = {https://www.vmware.com/topics/glossary/content/container-orchestration},
  urldate = {2021-06-13},
  abstract = {Container orchestration is the automation of much of the operational effort required to run containerized workloads and services.},
  file = {/home/javinator9889/Zotero/storage/CT6RJWZX/container-orchestration.html},
  langid = {english},
  organization = {{VMware}}
}

@online{ContainerRuntimeDocker,
  title = {Container {{Runtime}} with {{Docker Engine}} | {{Docker}}},
  url = {https://www.docker.com/products/container-runtime},
  urldate = {2021-06-03},
  abstract = {Learn about Docker Engine, the industry-leading container runtime that enables containerized applications to run anywhere consistently on any infrastructure.},
  file = {/home/javinator9889/Zotero/storage/JPT7PDEJ/container-runtime.html},
  langid = {english}
}

@online{ContentTrustDocker2021,
  title = {Content Trust in {{Docker}}},
  date = {2021-06-11T18:20:59+00:00},
  url = {https://docs.docker.com/engine/security/trust/},
  urldate = {2021-06-14},
  abstract = {Enabling content trust in Docker},
  file = {/home/javinator9889/Zotero/storage/NUQFTUK4/trust.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@inreference{DependencyHell2021,
  title = {Dependency Hell},
  booktitle = {Wikipedia},
  date = {2021-05-29T02:07:20Z},
  url = {https://en.wikipedia.org/w/index.php?title=Dependency_hell&oldid=1025704309},
  urldate = {2021-06-03},
  abstract = {Dependency hell is a colloquial term for the frustration of some software users who have installed software packages which have dependencies on specific versions of other software packages.The dependency issue arises when several packages have dependencies on the same shared packages or libraries, but they depend on different and incompatible versions of the shared packages. If the shared package or library can only be installed in a single version, the user may need to address the problem by obtaining newer or older versions of the dependent packages. This, in turn, may break other dependencies and push the problem to another set of packages.},
  annotation = {Page Version ID: 1025704309},
  file = {/home/javinator9889/Zotero/storage/VPTVK6MI/index.html},
  langid = {english}
}

@software{DockerClassicswarm2021,
  title = {Docker/Classicswarm},
  date = {2021-06-13T04:03:04Z},
  origdate = {2014-05-01T23:15:17Z},
  url = {https://github.com/docker/classicswarm},
  urldate = {2021-06-13},
  abstract = {Swarm Classic: a container clustering system. Not to be confused with Docker Swarm which is at https://github.com/docker/swarmkit},
  organization = {{Docker}}
}

@online{DockerComposeTutorial,
  title = {Docker {{Compose Tutorial}}: Advanced {{Docker}} Made Simple},
  shorttitle = {Docker {{Compose Tutorial}}},
  url = {https://www.educative.io/blog/docker-compose-tutorial},
  urldate = {2021-06-12},
  abstract = {Docker Compose is an advanced Docker tool that simplifies your workflow. In this article, we will show you how to get started with Docker Compose and its popular commands.},
  file = {/home/javinator9889/Zotero/storage/BQ75ZYG4/docker-compose-tutorial.html},
  langid = {english},
  organization = {{Educative: Interactive Courses for Software Developers}}
}

@online{DockerDesktopWSL2021,
  title = {Docker {{Desktop WSL}} 2 Backend},
  date = {2021-06-02T22:25:22+00:00},
  url = {https://docs.docker.com/docker-for-windows/wsl/},
  urldate = {2021-06-03},
  abstract = {Docker Desktop WSL 2 backend},
  file = {/home/javinator9889/Zotero/storage/Y7IU7QDA/wsl.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{DockerfileReference2021,
  title = {Dockerfile Reference},
  date = {2021-06-09T15:07:30+00:00},
  url = {https://docs.docker.com/engine/reference/builder/},
  urldate = {2021-06-09},
  abstract = {Dockerfiles use a simple DSL which allows you to automate the steps you would normally manually take to create an image.},
  file = {/home/javinator9889/Zotero/storage/XAE8BP2V/builder.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{DockerIptables2021,
  title = {Docker and Iptables},
  date = {2021-06-11T18:20:59+00:00},
  url = {https://docs.docker.com/network/iptables/},
  urldate = {2021-06-14},
  abstract = {The basics of how Docker works with iptables},
  file = {/home/javinator9889/Zotero/storage/Y6UTUIII/iptables.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{DockerNetworkConnect2021,
  title = {Docker Network Connect},
  date = {2021-06-09T22:05:24+00:00},
  url = {https://docs.docker.com/engine/reference/commandline/network_connect/},
  urldate = {2021-06-10},
  abstract = {docker network connect: Connects a container to a network. You can connect a container by name or by ID. Once connected, the container can communicate with other containers in the...},
  file = {/home/javinator9889/Zotero/storage/KL76L2JE/network_connect.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{DockerOverview2021,
  title = {Docker Overview},
  date = {2021-06-02T22:25:22+00:00},
  url = {https://docs.docker.com/get-started/overview/},
  urldate = {2021-06-03},
  abstract = {Docker explained in depth},
  file = {/home/javinator9889/Zotero/storage/5TV3LGRJ/overview.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{DockerSecurity2021,
  title = {Docker Security},
  date = {2021-06-09T15:07:30+00:00},
  url = {https://docs.docker.com/engine/security/},
  urldate = {2021-06-09},
  abstract = {Review of the Docker Daemon attack surface},
  file = {/home/javinator9889/Zotero/storage/ZUPJ7MDQ/security.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@inreference{DockerSoftware2021,
  title = {Docker (Software)},
  booktitle = {Wikipedia},
  date = {2021-06-06T10:34:33Z},
  url = {https://en.wikipedia.org/w/index.php?title=Docker_(software)&oldid=1027143347},
  urldate = {2021-06-09},
  abstract = {Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. Because all of the containers share the services of a single operating system kernel, they use fewer resources than virtual machines.The service has both free and premium tiers. The software that hosts the containers is called Docker Engine. It was first started in 2013 and is developed by Docker, Inc.},
  annotation = {Page Version ID: 1027143347},
  file = {/home/javinator9889/Zotero/storage/3NLQJU64/index.html},
  langid = {english}
}

@software{DockerSwarmkit2021,
  title = {Docker/Swarmkit},
  date = {2021-06-13T04:03:21Z},
  origdate = {2016-02-12T00:02:15Z},
  url = {https://github.com/docker/swarmkit},
  urldate = {2021-06-13},
  abstract = {A toolkit for orchestrating distributed systems at any scale. It includes primitives for node discovery, raft-based consensus, task scheduling and more.},
  organization = {{Docker}}
}

@online{DocumentationProcSys,
  title = {Documentation for /Proc/Sys/Fs/ — {{The Linux Kernel}} Documentation},
  url = {https://www.kernel.org/doc/html/latest/admin-guide/sysctl/fs.html#overflowgid-overflowuid},
  urldate = {2021-06-14},
  file = {/home/javinator9889/Zotero/storage/FE9BJLX7/fs.html}
}

@online{donohueHowCommunicateDocker2020,
  title = {How {{To Communicate Between Docker Containers}}},
  author = {Donohue, Tom},
  date = {2020-11-06T09:00:00+00:00},
  url = {https://www.tutorialworks.com/container-networking/},
  urldate = {2021-06-10},
  abstract = {Understand how a Docker container can talk to its container friends, by setting up a network. Includes a real example.},
  file = {/home/javinator9889/Zotero/storage/PMN9F5CK/container-networking.html},
  langid = {english},
  organization = {{Tutorial Works}}
}

@online{DonPanicKubernetes2020,
  title = {Don't {{Panic}}: {{Kubernetes}} and {{Docker}}},
  shorttitle = {Don't {{Panic}}},
  date = {2020-12-02T00:00:00+00:00},
  url = {https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/},
  urldate = {2021-06-13},
  abstract = {Authors: Jorge Castro, Duffie Cooley, Kat Cosgrove, Justin Garrison, Noah Kantrowitz, Bob Killen, Rey Lejano, Dan “POP” Papandrea, Jeffrey Sica, Davanum “Dims” Srinivas Kubernetes is deprecating Docker as a container runtime after v1.20. You do not need to panic. It’s not as dramatic as it sounds. TL;DR Docker as an underlying runtime is being deprecated in favor of runtimes that use the Container Runtime Interface (CRI) created for Kubernetes. Docker-produced images will continue to work in your cluster with all runtimes, as they always have.},
  file = {/home/javinator9889/Zotero/storage/N4FBJXFZ/dont-panic-kubernetes-and-docker.html},
  langid = {english},
  organization = {{Kubernetes}}
}

@online{Download2018Docker2018,
  title = {Download the 2018 {{Docker Usage Report}}},
  date = {2018-05-29T13:00:45+00:00},
  url = {https://sysdig.com/blog/2018-docker-usage-report/},
  urldate = {2021-06-04},
  abstract = {Our 2nd annual Docker Usage Report provides insight into real-world customer container deployments over the past year. Read about increasing densities},
  file = {/home/javinator9889/Zotero/storage/3MKXR9IC/2018-docker-usage-report.html},
  langid = {american},
  organization = {{Sysdig}}
}

@online{EmpoweringAppDevelopment,
  title = {Empowering {{App Development}} for {{Developers}} | {{Docker}}},
  url = {https://www.docker.com/},
  urldate = {2021-05-07},
  abstract = {Learn how Docker helps developers bring their ideas to life by conquering the complexity of app development.},
  file = {/home/javinator9889/Zotero/storage/WVI8GCZB/www.docker.com.html},
  langid = {english}
}

@online{EvolutionDataStorage,
  title = {Evolution of {{Data Storage Timeline}}},
  url = {/gateway/data-storage-timeline/},
  urldate = {2021-05-07},
  abstract = {Everybody stores data. We often take the devices that store our data for granted, as they have become so inexpensive and efficient. But we’ve come a long way from the early days of computing. Take a look at 14 of the most important devices in the history of data storage.},
  file = {/home/javinator9889/Zotero/storage/VHZEP456/data-storage-timeline.html},
  organization = {{The Gateway}}
}

@online{EvolutionDataStoragea,
  title = {evolution of data storage | Data storage, Data, Evolution},
  url = {https://www.pinterest.com/pin/80994493271887313/},
  urldate = {2021-05-07},
  abstract = {Feb 8, 2016 - This Pin was discovered by Heather Coates. Discover (and save!) your own Pins on Pinterest},
  file = {/home/javinator9889/Zotero/storage/DKL6Z4YQ/32228953561734324.html},
  langid = {spanish},
  organization = {{Pinterest}}
}

@online{Grsecurity,
  title = {Grsecurity},
  url = {https://grsecurity.net/},
  urldate = {2021-06-14},
  file = {/home/javinator9889/Zotero/storage/2Q5Z9IVH/grsecurity.net.html}
}

@online{HistoryTechnologyTimeline,
  title = {History of {{Technology Timeline}}},
  url = {https://www.britannica.com/story/history-of-technology-timeline},
  urldate = {2021-05-07},
  abstract = {Learn more about the history of technology from the first tools to the space age to the computer age.},
  file = {/home/javinator9889/Zotero/storage/DASW5GG5/history-of-technology-timeline.html},
  langid = {english},
  organization = {{Encyclopedia Britannica}}
}

@online{HowBecomeWeb,
  title = {How {{To Become A Web Developer}} in 2021 — {{Everything You Need To Know}}},
  url = {https://careerfoundry.com/en/blog/web-development/what-does-it-take-to-become-a-web-developer-everything-you-need-to-know-before-getting-started/},
  urldate = {2021-05-07},
  abstract = {Wondering how to become a web developer in 2021 and land a well-paid job? Discover the necessary skills, qualifications and tools you'll need in this compreh...},
  file = {/home/javinator9889/Zotero/storage/EMWYU8GK/what-does-it-take-to-become-a-web-developer-everything-you-need-to-know-before-getting-started.html},
  langid = {english}
}

@online{IndepthExplanationSwarm,
  title = {In-Depth Explanation of {{Swarm}} - {{Programmer Sought}}},
  url = {https://www.programmersought.com/article/9158256489/},
  urldate = {2021-06-13},
  file = {/home/javinator9889/Zotero/storage/2F4DGDAJ/9158256489.html}
}

@online{jethvaHowDockerfileWorks,
  title = {How {{Dockerfile Works}}? – {{Linux Hint}}},
  shorttitle = {How {{Dockerfile Works}}?},
  author = {Jethva, Hitesh},
  url = {https://linuxhint.com/dockerfile_beginner_guide/},
  urldate = {2021-06-10},
  abstract = {Dockerfile is a simple text file that contains all the commands user could call on the command line to assemble or build an image. After creating a dockerfile, you can use it over and over to build the same image without manually installing all required packages for your development process. In this article, how to build a docker image with Dockerfile is explained.},
  file = {/home/javinator9889/Zotero/storage/TW4NJ3TB/dockerfile_beginner_guide.html},
  langid = {american}
}

@online{KubernetesComponents,
  title = {Kubernetes {{Components}}},
  url = {https://kubernetes.io/docs/concepts/overview/components/},
  urldate = {2021-06-13},
  abstract = {A Kubernetes cluster consists of the components that represent the control plane and a set of machines called nodes.},
  file = {/home/javinator9889/Zotero/storage/SF4T6IEU/components.html},
  langid = {english},
  organization = {{Kubernetes}}
}

@online{KubernetesNumbers2020,
  title = {Kubernetes by the Numbers, in 2020: 12 Stats to See},
  shorttitle = {Kubernetes by the Numbers, in 2020},
  url = {https://enterprisersproject.com/article/2020/6/kubernetes-statistics-2020},
  urldate = {2021-06-13},
  abstract = {How is Kubernetes impacting enterprise IT? Let's unpack a dozen (and then some) numbers that speak to Kubernetes' continuing rise to IT ascendancy},
  file = {/home/javinator9889/Zotero/storage/DMRZHF3P/kubernetes-statistics-2020.html},
  langid = {english}
}

@online{kulshresthaDockerNetworkingExplore2020,
  title = {Docker {{Networking}} — {{Explore How Containers Communicate With Each Other}}},
  author = {Kulshrestha, Saurabh},
  date = {2020-09-10T10:00:33},
  url = {https://medium.com/edureka/docker-networking-1a7d65e89013},
  urldate = {2021-06-03},
  abstract = {This article on Docker Networking will introduce you to concepts such as Container Network Model \& Network Drivers with a Hands-On.},
  file = {/home/javinator9889/Zotero/storage/6CZSVIK2/docker-networking-1a7d65e89013.html},
  langid = {english},
  organization = {{Medium}}
}

@online{LegacyContainerLinks2021,
  title = {Legacy Container Links},
  date = {2021-06-09T22:05:24+00:00},
  url = {https://docs.docker.com/network/links/},
  urldate = {2021-06-10},
  abstract = {Learn how to connect Docker containers together.},
  file = {/home/javinator9889/Zotero/storage/5NJQQ4Q2/links.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@inreference{LinuxNamespaces2021,
  title = {Linux Namespaces},
  booktitle = {Wikipedia},
  date = {2021-06-01T10:09:00Z},
  url = {https://en.wikipedia.org/w/index.php?title=Linux_namespaces&oldid=1026275774},
  urldate = {2021-06-13},
  abstract = {Namespaces are a feature of the Linux kernel that partitions kernel resources such that one set of processes sees one set of resources while another set of processes sees a different set of resources.  The feature works by having the same namespace for a set of resources and processes, but those namespaces refer to distinct resources.  Resources may exist in multiple spaces. Examples of such resources are process IDs, hostnames, user IDs, file names, and some names associated with network access, and interprocess communication. Namespaces are a fundamental aspect of containers on Linux. The term "namespace" is often used for a type of namespace (e.g. process ID) as well as for a particular space of names. A Linux system starts out with a single namespace of each type, used by all processes.  Processes can create additional namespaces and join different namespaces.},
  annotation = {Page Version ID: 1026275774},
  file = {/home/javinator9889/Zotero/storage/VLY49746/index.html},
  langid = {english}
}

@online{ManageDataDocker2021,
  title = {Manage Data in {{Docker}}},
  date = {2021-06-02T22:25:22+00:00},
  url = {https://docs.docker.com/storage/},
  urldate = {2021-06-04},
  abstract = {Overview of persisting data in containers},
  file = {/home/javinator9889/Zotero/storage/A9IZYS9K/storage.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{NetworkingOverview2021,
  title = {Networking Overview},
  date = {2021-06-02T22:25:22+00:00},
  url = {https://docs.docker.com/network/},
  urldate = {2021-06-04},
  abstract = {Overview of Docker networks and networking concepts},
  file = {/home/javinator9889/Zotero/storage/7M2ZJG3E/network.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@inreference{OpenVZ2021,
  title = {{{OpenVZ}}},
  booktitle = {Wikipedia},
  date = {2021-01-07T16:34:08Z},
  url = {https://en.wikipedia.org/w/index.php?title=OpenVZ&oldid=998912714},
  urldate = {2021-06-14},
  abstract = {OpenVZ (Open Virtuozzo) is an operating-system-level virtualization technology for Linux. It allows a physical server to run multiple isolated operating system instances, called containers, virtual private servers (VPSs), or virtual environments (VEs). OpenVZ is similar to Solaris Containers and LXC.},
  annotation = {Page Version ID: 998912714},
  file = {/home/javinator9889/Zotero/storage/DLS6LAUK/index.html},
  langid = {english}
}

@online{OverviewDockerCompose2021,
  title = {Overview of {{Docker Compose}}},
  date = {2021-06-11T18:20:59+00:00},
  url = {https://docs.docker.com/compose/},
  urldate = {2021-06-12},
  abstract = {Introduction and Overview of Compose},
  file = {/home/javinator9889/Zotero/storage/EDAN29IW/compose.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@inreference{PaX2019,
  title = {PaX},
  booktitle = {Wikipedia, la enciclopedia libre},
  date = {2019-07-22T20:12:26Z},
  url = {https://es.wikipedia.org/w/index.php?title=PaX&oldid=117622364},
  urldate = {2021-06-14},
  abstract = {En seguridad informática, PaX es un parche del núcleo Linux que implementa protecciones del mínimo privilegio para las páginas de memoria. La aproximación del mínimo privilegio permite a los programas realizar lo que tienen que hacer de modo que sean capaces de ejecutarlo adecuadamente, y no poder realizar nada más. La primera versión de PaX fue publicada en el año 2000. PaX marca los datos de memoria como no ejecutables, la memoria del programa como no escribible y organiza aleatoriamente la memoria del programa. Esto previene eficazmente muchos de los exploits, como algunos tipos de desbordamientos de buffers. Previene la ejecución de código directa, mientras que los ataques conocidos como return-to-libc (ret2libc) son más difícil de explotar, fiándose de la suerte del éxito, pero no previene de la sobrescritura de variables y punteros. El equipo de PaX se encarga del mantenimiento de PaX, cuyo principal desarrollador es anónimo.},
  annotation = {Page Version ID: 117622364},
  file = {/home/javinator9889/Zotero/storage/RNPTTSCP/index.html},
  langid = {spanish}
}

@online{QueEsOrganizacion,
  title = {¿Qué es la organización en contenedores?},
  url = {https://www.redhat.com/es/topics/containers/what-is-container-orchestration},
  urldate = {2021-06-13},
  abstract = {La organización en contenedores automatiza la implementación, la gestión, la escalabilidad y la conexión en red de los contenedores.},
  file = {/home/javinator9889/Zotero/storage/7H3EX4FZ/what-is-container-orchestration.html},
  langid = {spanish}
}

@inproceedings{sunSecurityNamespaceMaking2018,
  title = {Security Namespace: {{Making}} Linux Security Frameworks Available to Containers},
  booktitle = {27th {{USENIX}} Security Symposium ({{USENIX}} Security 18)},
  author = {Sun, Yuqiong and Safford, David and Zohar, Mimi and Pendarakis, Dimitrios and Gu, Zhongshu and Jaeger, Trent},
  date = {2018-08},
  pages = {1423--1439},
  publisher = {{USENIX Association}},
  location = {{Baltimore, MD}},
  url = {https://www.usenix.org/conference/usenixsecurity18/presentation/sun},
  isbn = {978-1-939133-04-5}
}

@online{Swarm,
  title = {Swarm},
  url = {https://hub.docker.com/_/swarm},
  urldate = {2021-06-13},
  file = {/home/javinator9889/Zotero/storage/6WEUCTVX/swarm.html}
}

@online{SwarmModeKey2021,
  title = {Swarm Mode Key Concepts},
  date = {2021-06-11T18:20:59+00:00},
  url = {https://docs.docker.com/engine/swarm/key-concepts/},
  urldate = {2021-06-13},
  abstract = {Introducing key concepts for Docker Engine swarm mode},
  file = {/home/javinator9889/Zotero/storage/VNAH3GQL/key-concepts.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{SwarmModeOverview2021,
  title = {Swarm Mode Overview},
  date = {2021-06-11T18:20:59+00:00},
  url = {https://docs.docker.com/engine/swarm/},
  urldate = {2021-06-13},
  abstract = {Docker Engine swarm mode overview},
  file = {/home/javinator9889/Zotero/storage/88X2VYIL/swarm.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@inreference{UnionFS2020,
  title = {UnionFS},
  booktitle = {Wikipedia, la enciclopedia libre},
  date = {2020-07-02T14:04:53Z},
  url = {https://es.wikipedia.org/w/index.php?title=UnionFS&oldid=127421790},
  urldate = {2021-06-04},
  abstract = {UnionFS es un servicio para sistemas de archivos de Linux que permite montar un sistema de archivos formado por la unión de otros sistemas de archivos de Linux. Permite que archivos y directorios de sistemas de archivos distintos, conocidos como ramas, se superpongan de forma transparente, formando un único sistema de archivos. Los contenidos de directorios que tienen la misma ruta en las ramas que se combinan aparecerán juntos en un único directorio en el nuevo sistema de archivos virtual. UnionFS se utiliza principalmente en LiveCD o sistemas sin disco, donde el directorio raíz de solo lectura se combina con un sistema de archivos tmpfs (que reside en memoria y es modificable). De este modo, todos los archivos de la raíz de solo lectura pueden ser modificados, y la modificación se mantiene en memoria. Las diferentes ramas pueden ser sistemas de archivos de solo lectura o lectura y escritura, de forma que las escrituras al sistema de archivos virtual combinado pueden realizarse sobre un sistema de archivos real concreto. Esto lleva a otro útil propósito de las uniones de sistemas de archivos, que es hacer que un sistema de archivos parezca modificable, pero sin permitir realmente que las escrituras modifiquen el sistema de archivos, también conocido como copia en escritura. Esto puede ser deseable cuando el medio es físicamente de solo lectura, como en el caso de los CD-ROMs, o para utilizar una única plantilla común para varios sistemas de archivos, o quizás por razones de seguridad. La implementación de Linux, UnionFS, se utiliza algunas veces como un sistema de imágenes (snapshot) ad hoc. A la hora de montar ramas, la prioridad de una rama sobre otra es especificada. De este modo, cuando ambas ramas contienen un archivo con el mismo nombre, uno tiene prioridad sobre el otro. En los LiveCDs se utiliza para superponer un sistema de archivos modificable sobre un medio de solo lectura. En Knoppix por ejemplo la unión del sistema de archivos en el CD-ROM o DVD puede hacerse con el sistema de archivos contenido en una imagen llamada knoppix.img en una memoria USB que tenga prioridad sobre el sistema de archivos de solo lectura. El usuario ve un sistema de archivos en el que es posible añadir y cambiar archivos en cualquier sitio. Lo que ocurre en el nivel físico es que si un archivo pertenece a la rama de solo lectura es reemplazada con una nueva versión que se almacena en el archivo de imagen. Dado que el sistema de archivos de unión combina las dos ramas de forma transparente, el usuario simplemente ve la nueva versión.},
  annotation = {Page Version ID: 127421790},
  file = {/home/javinator9889/Zotero/storage/WWG98ZVU/index.html},
  langid = {spanish}
}

@online{UseBindMounts2021,
  title = {Use Bind Mounts},
  date = {2021-06-02T22:25:22+00:00},
  url = {https://docs.docker.com/storage/bind-mounts/},
  urldate = {2021-06-04},
  abstract = {Using bind mounts},
  file = {/home/javinator9889/Zotero/storage/EYF2F9FD/bind-mounts.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{UseServiceAccess,
  title = {Use a {{Service}} to {{Access}} an {{Application}} in a {{Cluster}}},
  url = {https://kubernetes.io/docs/tasks/access-application-cluster/service-access-application-cluster/},
  urldate = {2021-06-13},
  abstract = {This page shows how to create a Kubernetes Service object that external clients can use to access an application running in a cluster. The Service provides load balancing for an application that has two running instances. Before you begin You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. It is recommended to run this tutorial on a cluster with at least two nodes that are not acting as control plane hosts.},
  file = {/home/javinator9889/Zotero/storage/WT2UC54H/service-access-application-cluster.html},
  langid = {english},
  organization = {{Kubernetes}}
}

@online{UseVolumes2021,
  title = {Use Volumes},
  date = {2021-06-02T22:25:22+00:00},
  url = {https://docs.docker.com/storage/volumes/},
  urldate = {2021-06-04},
  abstract = {Using volumes},
  file = {/home/javinator9889/Zotero/storage/4K8K8M2Q/volumes.html},
  langid = {english},
  organization = {{Docker Documentation}}
}

@online{wattsStateContainersToday,
  title = {The {{State}} of {{Containers Today}}: {{A Report Summary}}},
  shorttitle = {The {{State}} of {{Containers Today}}},
  author = {Watts, Stephen},
  url = {https://www.bmc.com/blogs/state-of-containers/},
  urldate = {2021-06-04},
  file = {/home/javinator9889/Zotero/storage/KDHZ6QUK/state-of-containers.html},
  langid = {american},
  organization = {{BMC Blogs}}
}

@online{wecomputingtechStorageDevicesLondon,
  title = {Storage Devices London | {{We Computing Blog}}},
  author = {{WeComputingTech}},
  url = {http://www.wecomputing.com/blog/tag/storage-devices-london/},
  urldate = {2021-05-07},
  file = {/home/javinator9889/Zotero/storage/9D5CE9Z3/storage-devices-london.html},
  langid = {american}
}

@online{WhatContainerApp,
  title = {What Is a {{Container}}? | {{App Containerization}} | {{Docker}}},
  shorttitle = {What Is a {{Container}}?},
  url = {https://www.docker.com/resources/what-container},
  urldate = {2021-06-03},
  abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. Learn more.},
  file = {/home/javinator9889/Zotero/storage/VSTRIJIZ/what-container.html},
  langid = {english}
}

@online{WhatKubernetes,
  title = {What Is {{Kubernetes}}?},
  url = {https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/},
  urldate = {2021-06-13},
  abstract = {Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.},
  file = {/home/javinator9889/Zotero/storage/3MQPKKFM/what-is-kubernetes.html},
  langid = {english},
  organization = {{Kubernetes}}
}

@online{yegulalpWhatDockerSpark2019,
  title = {What Is {{Docker}}? {{The}} Spark for the Container Revolution},
  shorttitle = {What Is {{Docker}}?},
  author = {Yegulalp, Serdar},
  date = {2019-04-19T03:00-05:00},
  url = {https://www.infoworld.com/article/3204171/what-is-docker-the-spark-for-the-container-revolution.html},
  urldate = {2021-06-03},
  abstract = {Docker helps developers build lightweight and portable software containers that simplify application development, testing, and deployment},
  file = {/home/javinator9889/Zotero/storage/8MPN4LTW/what-is-docker-the-spark-for-the-container-revolution.html},
  langid = {english},
  organization = {{InfoWorld}}
}


